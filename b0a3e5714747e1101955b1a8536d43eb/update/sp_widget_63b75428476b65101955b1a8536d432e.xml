<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function ($filter, UpdatesetDownloadService, ExportToExcelService) {
    /* widget controller */
    var c = this;

    c.onFilter = '';
    c.currentFilteredData = [];
    c.sortColumn = 'name'; // initial sort
    c.reversedSort = false;
    c.filterApplied = false;

    //
    // Set the sort column and reversed sort
    // 
    c.sortData = function(column){
        c.sortColumn = column;
        c.reversedSort = c.sortColumn == column ? !c.reversedSort : c.reversedSort = false;
    }

    c.getSortClass = function(column){

        if(c.sortColumn == column){
            return c.reversedSort ? 'fa fa-sort-alpha-desc' : 'fa fa-sort-alpha-asc';
        }

        return '';
    }

    //
    // Get the filtered data
    //
    c.onFilterChange = function (data, query) {
        //console.log(data, query)
        c.filterApplied = query ? true : false;
        var filteredData = $filter('filter')(data, query);
        c.currentFilteredData = filteredData;
    }

    //
    // Get navigation URL to remote update-set
    //
    c.getUrl = function (url, name, local) {

        if (!url.endsWith("/")) {
            url = url + "/";
        }

        var updateSetUrl = '';

        if(local){
            updateSetUrl = "sys_update_set.do?sysparm_query=name=";
        }

        var link = url + updateSetUrl + name;
        return link;
    }

    //
    // Export the update-sets to Excel
    //
    c.exportTableToExcel = function () {

        var filename = 'open_updatesets';
        var elementId = "update-sets";

        ExportToExcelService.exportData(elementId, filename)
    }

    c.getFilterDataOrAll = function(){
        var data = [];
        if(c.filterApplied){
            data = c.currentFilteredData;
        }else{
            data = c.data.devUpdatesets;
        }

        return data;
    }

    // ********************************************************************************************************************************************
    // NOTE: You need to install the "Bulk Download-Rename of Update Sets" update-set from the ServiceNow share for this functionality to work
    // ********************************************************************************************************************************************

    //
    // Export the update-set to XML
    //
    c.exportUpdatesets = function () {
        var ids = c.getFilterDataOrAll().map(m=> m.sys_id).toString();
        UpdatesetDownloadService.downloadXml(ids);
    }

    //
    // Copy the update-set names as text in asc or desc order e.g. when trying to create the release notes
    //
    c.copyNames = function(){

        var data = c.getFilterDataOrAll();

        if(data && data.length > 1){
            var names = [];
            if(c.reversedSort == false){
                // sort asc
                names = data.sort((a,b)=> a.name.localeCompare(b.name)).map(d=> d.name);
            }else{
                // sort desc
                names = data.sort((a,b)=> b.name.localeCompare(a.name)).map(d=> d.name);
            }

            navigator.clipboard.writeText(names.join("\n"));
            alert(data.length + ' update-set names are copied to the clipboard.')
        }
    }

    //
    // Apply the configured validations to the updatesets and display the result
    //
    c.validateUpdatesets = function(){
        var data = c.getFilterDataOrAll();
        var ids = data.map(f=> f.sys_id);

        var inputs = {validate:true, sysIds: ids};
        c.server.get(inputs).then((response)=>{
            c.validationsResult = response.data.validationsResult;
        });
    }

};]]></client_script>
        <controller_as>c</controller_as>
        <css>// TODO: Clean up these CSS to portal level

$border-colour : #b0adad;

.dev-header,
.dev-subheader,
th.dev-header,
td.dev-subheader {
  background-color: #dce0d9; /* Green */
  border: 1px solid $border-colour;

}

.uat-header,
.uat-subheader,
th.uat-header,
td.uat-subheader {
  background-color: #fbf6ef; /* Orange: #ffc107 */
  border: 1px solid $border-colour;

}

.prod-header,
.prod-subheader,
th.prod-header,
td.prod-subheader {
  background-color:  #ead7c3; /* blueish */
  border: 1px solid $border-colour;

}

th.vertical-header {
  writing-mode: horizontal-tb;
  text-orientation: sideways;
  padding: 0.5rem;
  border: 1px solid $border-colour;
}

table, th, td {
  border: 1px solid $border-colour;
}

.colour-beige {
  color: cadetblue;
}

.colour-darkred {
  color: darkred;
}

.right-aligned-btn {
  float: right;
  margin-top: -3px;
}

.left-aligned {
  text-align: left;
}

.colour-pink {
  color: palegoldenrod;
}

.margin-right-4 {
  margin-right: 4px;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>open_updatesets</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) { 

 }]]></link>
        <name>Open Updatesets</name>
        <option_schema>[
    {
        "hint": "URL of the DEV environment",
        "name": "dev_url",
        "section": "Data",
        "default_value": "",
        "label": "DEV Url",
        "type": "string"
    },
    {
        "hint": "URL of the UAT or Test environment",
        "name": "uat_url",
        "section": "Data",
        "default_value": "",
        "label": "UAT Url",
        "type": "string"
    },
    {
        "hint": "URL of the PROD or Live environment",
        "name": "prod_url",
        "section": "Data",
        "default_value": "",
        "label": "PROD Url",
        "type": "string"
    },
    {
        "hint": "Encoded query to limit the number of updatesets to be searched. This is the encoded query to be applied to DEV update-sets. UAT and Prods are filtered based on DEV sys_ids",
        "name": "encoded_query",
        "section": "Data",
        "default_value": "state=complete^sys_created_byINadmin,system",
        "label": "Encoded query",
        "type": "string"
    },
    {
        "hint": "Maximum number of records to return",
        "name": "max_records_limit",
        "section": "Data",
        "default_value": "200",
        "label": "Max records limit",
        "type": "integer"
    }
]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {

	// Validate updatesets
	if (input && input.validate) {
		//gs.info("VF: validation calld!" + input.sysIds.toString())
		var validator = new x_293046_updateset.UpdatesetValidationBase();
		var result = validator.validate(input.sysIds);
		data.validationsResult = result;
		return;
	}

	// ----------------------------------------------------------------------------------------------------------------------------------------
	// Get instance option values from widget
	// ----------------------------------------------------------------------------------------------------------------------------------------

	data.devUrl = options.dev_url || gs.getProperty('x_293046_updateset.DEV_Base_URL');;
	let encodedQuery = options.encoded_query;
	let maxRecords = options.max_records_limit || gs.getProperty('x_293046_updateset.dev_records_limit', 100);


	// ----------------------------------------------------------------------------------------------------------------------------------------
	// Validate at least DEV and UAT URLs configured
	// ----------------------------------------------------------------------------------------------------------------------------------------

	let helper = new x_293046_updateset.OpenUpdatesetHelper(data.devUrl, maxRecords, encodedQuery);
	data.isConfigured = helper.isConfigured();

	// ----------------------------------------------------------------------------------------------------------------------------------------
	// Get the data and prepare view model
	// ----------------------------------------------------------------------------------------------------------------------------------------


	/**
	 * @returns Updateset data as list
	 */
	function getUpdatesetsData() {
		let allUpdatesets = helper.getAllLocalUpdatesets();
		return allUpdatesets;
	}


	//
	// This update-set from the ServiceNow share is required to do the bulk export of the updatesets.
	// https://developer.servicenow.com/blog.do?p=/post/share-spotlight-bulk-download-naming-of-update-sets/
	//
	function bulkDownloadExists() {
		var grSysUpdateSet = new GlideRecord('sys_update_set');
		grSysUpdateSet.addQuery('name', 'Bulk Download-Rename of Update Sets');
		grSysUpdateSet.setLimit(1);
		grSysUpdateSet.query();

		var bulkDownloadExists = grSysUpdateSet.getRowCount() > 0
		return bulkDownloadExists;
	}

	// Get the merged updatesets
	try {
		if (data.isConfigured) {
			let updatesets = getUpdatesetsData();

			//let formattedResults = prepareModel(updatesets)
			data.devUpdatesets = updatesets;

			data.bulkDownloadRenameExists = bulkDownloadExists();
		}
	} catch (error) {
		data.showError = true;
		data.errors = error.message || error;

		if (error.errorDetails) {
			console.log(error.errorDetails);
		}
	}

	// console.log(data.mergedUpdatesets = formattedResults); // log to browser console

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-06-17 02:45:49</sys_created_on>
        <sys_id>63b75428476b65101955b1a8536d432e</sys_id>
        <sys_mod_count>61</sys_mod_count>
        <sys_name>Open Updatesets</sys_name>
        <sys_package display_value="Updateset Management" source="x_293046_updateset">b0a3e5714747e1101955b1a8536d43eb</sys_package>
        <sys_policy/>
        <sys_scope display_value="Updateset Management">b0a3e5714747e1101955b1a8536d43eb</sys_scope>
        <sys_update_name>sp_widget_63b75428476b65101955b1a8536d432e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-27 11:45:56</sys_updated_on>
        <template><![CDATA[<!--Validators -->
<div ng-include="'validator-section-ou'"></div>

<!--Validation and error section -->
<div ng-include="'validation-error-section-ou'"></div>

<div ng-show="data.isConfigured && !data.showError">
  <!-- Filter section: which includes the filter option buttons and actions like download etc -->
  <div ng-include="'filter-section-ou'"></div>

  <!--Details section: which includes the details of the updatesets for all the environments -->
  <div id="update-sets" ng-include="'details-section-ou'"></div>

  
</div>

<!-- <pre>
  {{data.mergedUpdatesets}}
</pre> -->
]]></template>
    </sp_widget>
</record_update>
