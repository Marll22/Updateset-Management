<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function ($http, $filter) {
    /* widget controller */
    var c = this;

    c.selectedOption = '';
    c.currentFilteredData = [];

    //
    // Function that handles the filtering options
    //
    c.filterBySelectedOption = function (item) {

        if (!item) return false;

        // console.log(item);
        var STATE_COMMITTED = "Yes";

        var result = false

        switch (c.selectedOption) {
            case 'all':
                result = true;
                break;
            case 'uatCommitted':
                if (item.uatUpdateset && item.uatUpdateset.committed == STATE_COMMITTED) {
                    result = true;
                }
                break;
            case 'uatUncommitted':
                if (item.uatUpdateset && item.uatUpdateset.committed != STATE_COMMITTED) {
                    result = true;
                }
                break;
            case 'prodCommitted':
                if (item.prodUpdateset && item.prodUpdateset.committed == STATE_COMMITTED) {
                    result = true;
                }
                break;
            case 'prodUncommitted':
                if (item.prodUpdateset && item.prodUpdateset.committed != STATE_COMMITTED) {
                    result = true;
                    break;
                }
        }

        return result;
    }

    //
    // Get the filtered data
    //
    c.onFilterChange = function (data, query) {
        var filteredData = $filter('filter')(data, query);
        c.currentFilteredData = filteredData;
    }

    //
    // Get navigation URL to remote update-set
    //
    c.getUrl = function (url, name) {

        if (!url.endsWith("/")) {
            url = url + "/";
        }

        var link = url + "sys_remote_update_set.do?sysparm_query=name=" + name;
        return link;
    }

    //
    // Export the update-sets to Excel
    //
    c.exportTableToExcel = function () {
        var filename = 'updatesets';
        var downloadLink;
        var dataType = 'application/vnd.ms-excel';
        var tableSelect = document.getElementById("update-sets");
        var tableHTML = tableSelect.outerHTML.replace(/ /g, '%20');

        // Specify file name
        filename = filename ? filename + '.xls' : 'excel_data.xls';

        // Create download link element
        downloadLink = document.createElement("a");

        document.body.appendChild(downloadLink);

        if (navigator.msSaveOrOpenBlob) {
            var blob = new Blob(['\ufeff', tableHTML], {
                type: dataType
            });
            navigator.msSaveOrOpenBlob(blob, filename);
        } else {
            // Create a link to the file
            downloadLink.href = 'data:' + dataType + ', ' + tableHTML;

            // Setting the file name
            downloadLink.download = filename;

            //triggering the function
            downloadLink.click();
        }

    }

    // ********************************************************************************************************************************************
    // NOTE: You need to install the "Bulk Download-Rename of Update Sets" update-set from the ServiceNow share for this functionality to work
    // ********************************************************************************************************************************************

    //
    // Export the update-set to XML
    //
    c.exportUpdatesets = function () {

        if (c.currentFilteredData && c.currentFilteredData.length > 0) {
            var downloads = c.currentFilteredData.length;
            var confirmed = confirm("This will download all the filtered " + downloads + " updatesets as XML file to your local machine. Are you sure you want to proceed?");

            if(confirmed){
                var ids = c.currentFilteredData.map(f=> f.devUpdateset.sys_id).toString();
                var sets = ids.split(',');
    
                for (var i = 0, L = sets.length; i < L; i++) {
                    window.open("export_as_remote_update_set.do?sysparam_table=sys_update_set&sysparam_sys_id=" + sets[i]);
                }
            }
        }else{
            alert('Filter the updatesets and then click this button. This will download all the filtered updatesets as XML to your local machine.')
        }
    }


};]]></client_script>
        <controller_as>c</controller_as>
        <css>.dev-header,
.dev-subheader,
th.dev-header,
td.dev-subheader {
  background-color: #c3e6cb; /* Green */
}

.uat-header,
.uat-subheader,
th.uat-header,
td.uat-subheader {
  background-color: coral; /* Orange: #ffc107 */
}

.prod-header,
.prod-subheader,
th.prod-header,
td.prod-subheader {
  background-color: darkturquoise; /* blueish */
}

th.vertical-header {
  writing-mode: horizontal-tb;
  text-orientation: sideways;
  padding: 0.5rem;
}

.colour-beige {
  color: beige;
}

.colour-darkred {
  color: darkred;
}

.right-aligned-btn {
  float: right;
  margin-top: -3px;
}

.left-aligned {
  text-align: left;
}

.colour-pink {
  color: palegoldenrod;
}

.margin-right-4 {
  margin-right: 4px;
}

/* Tooltip stuff */
.tooltip-text {
  visibility: hidden;
  position: absolute;
  z-index: 1;
  width: 100px;
  color: white;
  background-color: #192733;
  padding: 5px;
}

.hover-text:hover .tooltip-text {
  visibility: visible;
}

.left {
  top: -8px;
  right: 120%;
}

.hover-text {
  position: relative;
  display: inline-block;
  text-align: center;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>compare_updatesets</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) { 

 }]]></link>
        <name>Compare updatesets</name>
        <option_schema>[{"hint":"URL of the DEV environment","name":"dev_url","section":"Data","default_value":"https://dev50458.service-now.com/","label":"DEV Url","type":"string"},{"hint":"URL of the UAT or Test environment","name":"uat_url","section":"Data","default_value":"https://dev86854.service-now.com/","label":"UAT Url","type":"string"},{"hint":"URL of the PROD or Live environment","name":"prod_url","section":"Data","default_value":"https://dev86854.service-now.com/","label":"PROD Url","type":"string"},{"hint":"Encoded query to limit the number of updatesets to be searched. This is the encoded query to be applied to DEV update-sets. UAT and Prods are filtered based on DEV sys_ids","name":"encoded_query","section":"Data","default_value":"state=complete^sys_created_byINadmin,system","label":"Encoded query","type":"string"},{"hint":"Maximum number of records to return","name":"max_records_limit","section":"Data","default_value":"200","label":"Max records limit","type":"integer"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {

	// ----------------------------------------------------------------------------------------------------------------------------------------
	// Get instance option values from widget
	// ----------------------------------------------------------------------------------------------------------------------------------------

	data.devUrl = options.dev_url || gs.getProperty('x_293046_updateset.DEV_Base_URL');;
	data.uatUrl = options.uat_url || gs.getProperty('x_293046_updateset.UAT_Base_URL');
	data.prodUrl = options.prod_url || gs.getProperty('x_293046_updateset.Prod_Base_URL');
	let encodedQuery = options.encoded_query;
	let maxRecords = options.max_records_limit || gs.getProperty('x_293046_updateset.dev_records_limit', 100);


	// ----------------------------------------------------------------------------------------------------------------------------------------
	// Validate at least DEV and UAT URLs configured
	// ----------------------------------------------------------------------------------------------------------------------------------------

	let helper = new x_293046_updateset.UpdatesetHelper(data.devUrl, data.uatUrl, data.prodUrl, maxRecords, encodedQuery);
	data.isConfigured = helper.isConfigured();

	// ----------------------------------------------------------------------------------------------------------------------------------------
	// Get the data and prepare view model
	// ----------------------------------------------------------------------------------------------------------------------------------------


	/**
	 * @returns Updateset data as list
	 */
	function getUpdatesetsData() {
		let allUpdatesets = helper.getMergedUpdatesets();
		return allUpdatesets;
	}

	/**
	 * Prepare the view model data
	 * @param {array of object} mergedUpdatesets 
	 * @returns an array formatted for UI usage
	 */
	function prepareModel(mergedUpdatesets) {
		// Format the response for the UI
		let formattedResults = [];

		mergedUpdatesets.forEach(updateSetResult => {

			var formattedResult = {
				devUpdateset: {},
				uatUpdateset: {
					exists: false,
					committed: false,
					localState: '',
					remoteState: '',
					source: ''
				},
				prodUpdateset: {
					exists: false,
					committed: false,
					localState: '',
					remoteState: '',
					source: ''
				}
			}

			// DEV updateset
			formattedResult.devUpdateset = updateSetResult.devUpdateset;

			// UAT updateset
			formattedResult.uatUpdateset = {
				exists: (updateSetResult.uatUpdatesetLocal || updateSetResult.uatUpdatesetRemote) ? 'Yes' : 'No',
				committed: ((updateSetResult.uatUpdatesetLocal && updateSetResult.uatUpdatesetLocal.state == 'Committed') ||
					(updateSetResult.uatUpdatesetRemote && updateSetResult.uatUpdatesetRemote.state == 'Committed')) ? 'Yes' : 'No',
				source: updateSetResult.uatUpdatesetRemote ? updateSetResult.uatUpdatesetRemote.update_source : '',
				hasRemoteAndLocal: (updateSetResult.uatUpdatesetRemote && updateSetResult.uatUpdatesetLocal) ? 'Yes' : 'No'
			}

			// Prod updateset
			formattedResult.prodUpdateset = {
				exists: (updateSetResult.prodUpdatesetLocal || updateSetResult.prodUpdatesetRemote) ? 'Yes' : 'No',
				committed: ((updateSetResult.prodUpdatesetLocal && updateSetResult.prodUpdatesetLocal.state == 'Committed') ||
					(updateSetResult.prodUpdatesetRemote && updateSetResult.prodUpdatesetRemote.state == 'Committed')) ? 'Yes' : 'No',
				source: updateSetResult.prodUpdatesetRemote ? updateSetResult.prodUpdatesetRemote.update_source : '',
				hasRemoteAndLocal: (updateSetResult.prodUpdatesetRemote && updateSetResult.prodUpdatesetLocal) ? 'Yes' : 'No'
			}

			formattedResults.push(formattedResult);

		});

		return formattedResults;
	}

	//
	// This update-set from the ServiceNow share is required to do the bulk export of the updatesets.
	// https://developer.servicenow.com/blog.do?p=/post/share-spotlight-bulk-download-naming-of-update-sets/
	//
	function bulkDownloadExists() {
		var grSysUpdateSet = new GlideRecord('sys_update_set');
		grSysUpdateSet.addQuery('name', 'Bulk Download-Rename of Update Sets');
		grSysUpdateSet.setLimit(1);
		grSysUpdateSet.query();

		var bulkDownloadExists = grSysUpdateSet.getRowCount() > 0
		return bulkDownloadExists;
	}

	// Get the merged updatesets
	try {
		if (data.isConfigured) {
			let mergedUpdatesets = getUpdatesetsData();

			let formattedResults = prepareModel(mergedUpdatesets)
			data.mergedUpdatesets = formattedResults;

			data.bulkDownloadRenameExists = bulkDownloadExists();
		}
	} catch (error) {
		data.showError = true;
		data.errors = error.message || error;

		if (error.errorDetails) {
			console.log(error.errorDetails);
		}
	}

	// console.log(data.mergedUpdatesets = formattedResults); // log to browser console

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-27 09:18:34</sys_created_on>
        <sys_id>5118e1714787e1101955b1a8536d43b4</sys_id>
        <sys_mod_count>282</sys_mod_count>
        <sys_name>Compare updatesets</sys_name>
        <sys_package display_value="Updateset Management" source="x_293046_updateset">b0a3e5714747e1101955b1a8536d43eb</sys_package>
        <sys_policy/>
        <sys_scope display_value="Updateset Management">b0a3e5714747e1101955b1a8536d43eb</sys_scope>
        <sys_update_name>sp_widget_5118e1714787e1101955b1a8536d43b4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-09 05:46:56</sys_updated_on>
        <template><![CDATA[<!--Validation and error section -->
<div class="alert alert-warning" role="alert" ng-show="!data.isConfigured">
  ${
    If this is the first time you are viewing this page then please configure the DEV, UAT (Test), and Production environment Urls and other required configurations.
    These settings can be configured either using this Widget instance Options or in the back-end using the required System Properties. Please navigate to "Updateset Management" application menu and configure the options.
}
</div>

<div class="alert alert-warning" role="alert" ng-show="data.showError">
  {{data.errors}}
</div>

<div ng-show="data.isConfigured && !data.showError">
  <!-- Filter section -->
  <div
    ng-init="c.selectedOption= 'all'"
    class="panel panel-default"
    style="
      padding: 10px;
      background-color: #fff;
      box-shadow: 0 8px 12px -8px rgba(0, 0, 0, 0.3);
      margin-bottom: 10px;
    "
  >
    <div class="checkbox-inline">
      <input
        class="form-check-input"
        type="radio"
        ng-model="c.selectedOption"
        name="inlineRadioOptions"
        id="all"
        value="all"
        ng-change="c.onFilterChange(data.mergedUpdatesets, c.filterBySelectedOption)"
      />
      <label class="form-check-label" for="all">All</label>
    </div>
    <div class="checkbox-inline">
      <input
        class="form-check-input"
        type="radio"
        ng-model="c.selectedOption"
        name="inlineRadioOptions"
        id="uatCommitted"
        value="uatCommitted"
        ng-change="c.onFilterChange(data.mergedUpdatesets, c.filterBySelectedOption)"
      />
      <label class="form-check-label" for="uat1">UAT Committed</label>
    </div>
    <div class="checkbox-inline">
      <input
        class="form-check-input"
        type="radio"
        ng-model="c.selectedOption"
        name="inlineRadioOptions"
        id="uatUncommitted"
        value="uatUncommitted"
        ng-change="c.onFilterChange(data.mergedUpdatesets, c.filterBySelectedOption)"
      />
      <label class="form-check-label" for="inlineRadio2"
        >UAT Un-committed</label
      >
    </div>
    <div class="checkbox-inline">
      <input
        class="form-check-input"
        type="radio"
        ng-model="c.selectedOption"
        name="inlineRadioOptions"
        id="prodCommitted"
        value="prodCommitted"
        ng-change="c.onFilterChange(data.mergedUpdatesets, c.filterBySelectedOption)"
      />
      <label class="form-check-label" for="prod1">Prod Committed</label>
    </div>
    <div class="checkbox-inline">
      <input
        class="form-check-input"
        type="radio"
        ng-model="c.selectedOption"
        name="inlineRadioOptions"
        id="prodUncommitted"
        value="prodUncommitted"
        ng-change="c.onFilterChange(data.mergedUpdatesets, c.filterBySelectedOption)"
      />
      <label class="form-check-label" for="prod1">Prod Un-committed</label>
    </div>

    <!-- <input ng-model="c.selectedOption" value="filterByName" style="width: 200px" class="form-control form-control-sm checkbox-inline" type="text" placeholder="Filter by name"> -->

    <button class="btn btn-success right-aligned-btn hover-text" ng-click="c.exportTableToExcel('updates','update-sets')" >
      <i class="fa fa-table" aria-hidden="true"></i>
      <span class="tooltip-text left">Export to Excel</span>
    </button>

    <button ng-show="data.bulkDownloadRenameExists" class="btn btn-success right-aligned-btn hover-text margin-right-4" ng-click="c.exportUpdatesets()" >
      <i class="fa fa-solid fa-download"></i>
    <span class="tooltip-text left">Export to XML</span>

  </button>

  </div>

  <!--Details section -->
  <div>
    <table id="update-sets" class="table">
      <thead class="thead-dark">
        <tr>
          <th class="dev-header" colspan="2">
            <h2>${DEV}</h2>
          </th>
          <th class="uat-header" colspan="3">
            <h2>${UAT}</h2>
          </th>
          <th class="prod-header" colspan="3">
            <h2>${PROD}</h2>
          </th>
        </tr>
        <tr>
          <th class="vertical-header dev-subheader">${Name}</th>
          <th class="vertical-header dev-subheader">${Created by}</th>

          <th class="vertical-header uat-subheader">${Exists?}</th>
          <th class="vertical-header uat-subheader">${Committed?}</th>
          <th class="vertical-header uat-subheader left-aligned">
            ${Multiple sources}
          </th>

          <th class="vertical-header prod-subheader">${Exists?}</th>
          <th class="vertical-header prod-subheader">${Committed?}</th>
          <th class="vertical-header prod-subheader left-aligned">
            ${Multiple sources}
          </th>
        </tr>
      </thead>
      <tbody>
        <!-- Insert your data rows here -->
        <tr
          ng-repeat="mergedUpdateset in data.mergedUpdatesets | filter:c.filterBySelectedOption"
        >
          <!-- DEV -->
          <td class="dev-subheader">{{mergedUpdateset.devUpdateset.name}}</td>
          <td class="dev-subheader">
            {{mergedUpdateset.devUpdateset.sys_created_by}}
          </td>

          <!-- UAT -->
          <td class="uat-subheader left-aligned left-aligned">
            <!-- Exist -->

            <span ng-show="mergedUpdateset.uatUpdateset.exists == 'Yes'" >
              <a ng-show="mergedUpdateset.uatUpdateset.exists == 'Yes'" target="_blank" ng-href="{{c.getUrl(data.uatUrl, mergedUpdateset.devUpdateset.name)}}">
                <i class="colour-beige fa fa-check-circle" ></i>
                <i class="colour-beige fa fa-life-ring"></i>
              </a>
            </span>

            <!-- <i ng-show="mergedUpdateset.uatUpdateset.exists == 'Yes'" class="colour-beige fa fa-check-circle" ></i> -->
            <i ng-show="mergedUpdateset.uatUpdateset.exists == 'No'"  class="colour-darkred fa fa-times-circle" ></i>

            {{mergedUpdateset.uatUpdateset.exists}}
          </td>
          <td class="uat-subheader left-aligned">
            <!-- Committed -->
            <i
              ng-show="mergedUpdateset.uatUpdateset.committed == 'Yes'"
              class="colour-beige fa fa-check-circle"
            ></i>
            <i
              ng-show="mergedUpdateset.uatUpdateset.committed == 'No'"
              class="colour-darkred fa fa-times-circle"
            ></i>
            {{mergedUpdateset.uatUpdateset.committed }}
          </td>

          <td class="uat-subheader left-aligned">
            <!-- Multiple updatesets -->
            <i
              ng-show="mergedUpdateset.uatUpdateset.hasRemoteAndLocal == 'Yes'"
              class="colour-pink fa fa-exclamation-circle"
            ></i>
            <i
              ng-show="mergedUpdateset.uatUpdateset.hasRemoteAndLocal == 'No'"
              class="colour-darkred fa fa-times-circle"
            ></i>

            {{ mergedUpdateset.uatUpdateset.hasRemoteAndLocal}}
          </td>

          <!-- PROD -->
          <td class="prod-subheader left-aligned">
            <!-- Exist -->
            <span ng-show="mergedUpdateset.prodUpdateset.exists == 'Yes'" >
              <a ng-show="mergedUpdateset.prodUpdateset.exists == 'Yes'" target="_blank" ng-href="{{c.getUrl(data.uatUrl, mergedUpdateset.devUpdateset.name)}}">
                <i class="colour-beige fa fa-check-circle" ></i>
                <i class="colour-beige fa fa-life-ring"></i>
              </a>
            </span>

            <i
              ng-show="mergedUpdateset.prodUpdateset.exists == 'No'"
              class="colour-darkred fa fa-times-circle"
            ></i>

            {{mergedUpdateset.prodUpdateset.exists}}
          </td>
          <td class="prod-subheader left-aligned">
            <!-- Committed -->
            <i
              ng-show="mergedUpdateset.prodUpdateset.committed == 'Yes'"
              class="colour-beige fa fa-check-circle"
            ></i>
            <i
              ng-show="mergedUpdateset.prodUpdateset.committed == 'No'"
              class="colour-darkred fa fa-times-circle"
            ></i>

            {{mergedUpdateset.prodUpdateset.committed}}
          </td>

          <td class="prod-subheader left-aligned">
            <!-- Multiple updatesets -->
            <i
              ng-show="mergedUpdateset.prodUpdateset.hasRemoteAndLocal == 'Yes'"
              class="colour-pink fa fa-exclamation-circle"
            ></i>
            <i
              ng-show="mergedUpdateset.prodUpdateset.hasRemoteAndLocal == 'No'"
              class="colour-darkred fa fa-times-circle"
            ></i>

            {{ mergedUpdateset.prodUpdateset.hasRemoteAndLocal}}
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>

<!-- <pre>
  {{data.mergedUpdatesets}}
</pre> -->
]]></template>
    </sp_widget>
</record_update>
