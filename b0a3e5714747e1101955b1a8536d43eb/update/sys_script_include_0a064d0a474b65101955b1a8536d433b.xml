<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_293046_updateset.UpdatesetHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>UpdatesetHelper</name>
        <script><![CDATA[var UpdatesetHelper = Class.create();
UpdatesetHelper.prototype = {

  devUrl: '',
  uatUrl: '',
  prodUrl: '',
  devRecordsLimit: 0,
  devEncodedQuery: '',

  /**
   * 
   * @param {string} devUrl : DEV instance URL
   * @param {string} uatUrl : UAT URL
   * @param {string} prodUrl : Prod URL
   * @param {string} maxRecordsLimit : Max number of records to search
   * @param {string} encodedQuery : encoded query to be applied to limit the records
   */
  initialize: function (devUrl, uatUrl, prodUrl, maxRecordsLimit, encodedQuery) {

    this.devUrl = devUrl ? devUrl : gs.getProperty('x_293046_updateset.DEV_Base_URL');
    this.uatUrl = uatUrl ? uatUrl : gs.getProperty('x_293046_updateset.UAT_Base_URL');
    this.prodUrl = prodUrl ? prodUrl : gs.getProperty('x_293046_updateset.Prod_Base_URL');
    this.devRecordsLimit = maxRecordsLimit ? maxRecordsLimit : gs.getProperty('x_293046_updateset.dev_records_limit', 100);

    if (encodedQuery) {
      encodedQuery = encodeURIComponent(encodedQuery); // Apply URI encoding as REST needs i
    }

    this.devEncodedQuery = encodedQuery ? encodedQuery : "state=complete";

    this.logIfDebug("this.devUrl:" + this.devUrl);
    this.logIfDebug("this.uatUrl:" + this.uatUrl);
    this.logIfDebug("this.prodUrl:" + this.prodUrl);
    this.logIfDebug("this.devEncodedQuery:" + this.devEncodedQuery);
  },

  /**
   * Public function indicating of the widget/system properties etc are configured
   */
  isConfigured: function () {
    if (!this.devUrl || !this.uatUrl) {
      return false;
    }

    return true;
  },

  /**
   * This is the main function to be called. It will return all update-sets with Dev update-sets as left joined
   * @returns a list of all the DEV, UAT and Prod update-sets
   */
  getMergedUpdatesets: function () {

    var allUpdatesets = this.processUpdateSetsForAllEnvironments();

    var joinedUpdatesets = this.leftJoinUpdatesets(allUpdatesets.dev, allUpdatesets.uat, allUpdatesets.prod);

    return joinedUpdatesets;

  },

  /**
   * 
   * @param {array} dev : array of the DEV update-sets
   * @param {array} uat : array of the UAT update-sets
   * @param {array} prod : array of the PROD update-sets
   * @returns a flat array that will have a node for each of the DEV updateset or default it to null if not exist in UAT and Prod
   */
  leftJoinUpdatesets: function (dev, uat, prod) {
    const result = [];

    for (let i = 0; i < dev.length; i++) {
      const joinedUpdatesets = {
        devUpdateset: dev[i],
        uatUpdatesetLocal: null,
        uatUpdatesetRemote: null,
        prodUpdatesetLocal: null,
        prodUpdatesetRemote: null
      };

      const uatMatch = uat.filter(updateset => updateset.name === dev[i].name);
      if (uatMatch) {
        joinedUpdatesets.uatUpdatesetLocal = uatMatch.find(us => !us.update_source) || null;
        joinedUpdatesets.uatUpdatesetRemote = uatMatch.find(us => us.update_source) || null;
      }

      const prodMatch = prod.filter(updateset => updateset.name === dev[i].name);
      if (prodMatch) {
        joinedUpdatesets.prodUpdatesetLocal = prodMatch.find(us => !us.update_source) || null;
        joinedUpdatesets.prodUpdatesetRemote = prodMatch.find(us => us.update_source) || null;
      }

      result.push(joinedUpdatesets);
    }

    return result.flat();
  },

  /**
   * Returns all the update-sets for DEV, UAT and Prod unprocessed.
   * UAT and PROD update-sets are filtered based on the names of the DEV
   * @returns 
   */
  processUpdateSetsForAllEnvironments: function () {
    // Get the local and remote update-sets
    let allUpdatesets = {
      dev: [],
      uat: [],
      prod: []
    };

    let localUpdatesets = this.getDevUpdatesets();

    // Get the remote update-sets for the sys_ids we identified for DEV
    if (localUpdatesets && this.isValidJSON(localUpdatesets)) {
      let resultObj = JSON.parse(localUpdatesets);
      allUpdatesets.dev = resultObj.result;

      const maxUrlLength = 1700;
      let encodedQueryList = this.encodeWithMaxLength(maxUrlLength, allUpdatesets.dev);

      allUpdatesets.uat = this.getBatchUatUpdatesets(encodedQueryList);

      allUpdatesets.prod = this.getBatchProdUpdatesets(encodedQueryList);

    }

    return allUpdatesets;
  },


  /**
   * Gets a list of updatesets from DEV and generates a LIST of encoded queries based on the name of the update-sets
   * The point to note is the encoded query is passed as URL and there is limit to the size of the URL request e.g. for Chrome it is 2024 chars
   * so this function generates 1 or more encoded query based on the max length value specified
   * 
   * @param {integer} maxLength : max length of the encoded query for one request
   * @param {*} updatesetList : Dev updatesets
   * @returns a list of encoded query requests
   */
  encodeWithMaxLength: function (maxLength, updatesetList) {
    const queryPrefix = "nameIN";
    const encodedQueriesList = [];
    let itemsEncodedQuery = queryPrefix;

    for (let i = 0; i < updatesetList.length; i++) {
      const updateset = updatesetList[i];
      const itemEncodedQuery = encodeURIComponent(updateset.name);

      if (itemEncodedQuery.length + itemsEncodedQuery.length <= maxLength) {
        itemsEncodedQuery += itemEncodedQuery + ",";
      } else {
        if (itemsEncodedQuery.length > queryPrefix.length) {
          encodedQueriesList.push(itemsEncodedQuery);
        }
        itemsEncodedQuery = queryPrefix + itemEncodedQuery + ",";
      }
    }

    if (itemsEncodedQuery.length > queryPrefix.length) {
      encodedQueriesList.push(itemsEncodedQuery.trim(","));
    }

    return encodedQueriesList;
  },

  /**
   * This function does one or more REST calls to get UAT update-sets based on the number of items in encodedQueryList
   * @param {array of string} encodedQueryList : list of encoded query with specified max lenght
   * @returns : a flat array of UAT updatesets.
   */
  getBatchUatUpdatesets: function (encodedQueryList) {
    let batchResult = [];

    encodedQueryList.forEach(encodedQuery => {
      this.logIfDebug(encodedQuery);

      let uatResultJson = this.getUatUpdatesets(encodedQuery);
      if (uatResultJson && this.isValidJSON(uatResultJson)) {
        let uatResultObj = JSON.parse(uatResultJson);
        var uat = uatResultObj.result;
        batchResult.push(uat);
      }
    });

    let flatArray = [].concat(...batchResult);;
    return flatArray;
  },

  /**
 * This function does one or more REST calls to get Prod update-sets based on the number of items in encodedQueryList
 * @param {array of string} encodedQueryList : list of encoded query with specified max length
 * @returns : a flat array of Prod updatesets.
 */
  getBatchProdUpdatesets: function (encodedQueryList) {
    let batchResult = []; // this will be a parent array with two or more child arrays that will contain the update-sets

    encodedQueryList.forEach(encodedQuery => {
      this.logIfDebug(encodedQuery);

      let prodResultJson = this.getProdUpdatesets(encodedQuery);
      if (prodResultJson && this.isValidJSON(prodResultJson)) {
        let prodResultObj = JSON.parse(prodResultJson);
        var prod = prodResultObj.result;
        batchResult.push(prod);
      }

    });

    let flatArray = [].concat(...batchResult);;
    return flatArray; // contact all child arrays as one flat array
  },

  /**
   * Returns UAT updatesets for one request
   * @param {string} encodedQuery 
   * @returns Returns the list of updatesets for one request based on encodedQuery
   */
  getUatUpdatesets: function (encodedQuery) {
    let result = [];

    if (!this.uatUrl) return result;

    result = this.getRemoteUpdatesets(this.uatUrl, encodedQuery);
    return result;
  },

  /**
  * Returns Prod updatesets for one request
  * @param {string} encodedQuery 
  * @returns Returns the list of updatesets for one request based on encodedQuery
  */
  getProdUpdatesets: function (encodedQuery) {
    let result = [];

    if (!this.prodUrl) return result;

    result = this.getRemoteUpdatesets(this.prodUrl, encodedQuery);
    return result;
  },

  /**
   * REST call to get all the DEV update-sets based on the filters defined in Widget Options or system properties
   * @returns Return the local updatesets
   */
  getDevUpdatesets: function () {
    let result = [];

    try {
      if (!this.devUrl) return result;

      let r = new sn_ws.RESTMessageV2('x_293046_updateset.Updateset Management', 'Get Local Updateset');
      r.setStringParameterNoEscape('base_url', this.devUrl);
      r.setStringParameterNoEscape('record_limit', this.devRecordsLimit);
      r.setStringParameterNoEscape('sys_parm_encoded_query', this.devEncodedQuery);

      var response = r.execute();

      if (!response.haveError()) {
        result = response.getBody();
        this.logIfDebug("DEV:result: " + result);
      } else {
        this.throwKnownError(
          gs.getMessage("There was error while retrieving the local updatesets. The error has been logged. Please try again."),
          response.getErrorMessage()
        );
      }


    } catch (ex) {
      var message = ex.message;
      gs.error(gs.getMessage("VF: Error in getting local updatestes: " + message));
      throw (message);
    }

    return result;
  },

  /**
   * 
   * @param {string} url : URL of the instance
   * @param {string} encodedQuery : list of the DEV sys_ids concatenated
   * @returns A list of all the update-sets based on DEV sys_ids
   */
  getRemoteUpdatesets: function (url, encodedQuery) {
    let result = [];

    if (!url) return result;

    try {
      var r = new sn_ws.RESTMessageV2('x_293046_updateset.Updateset Management', 'GET Remote Updatesets');
      r.setStringParameterNoEscape('base_url', url);
      r.setStringParameterNoEscape('fields', 'name,state,sys_id,remote_sys_id,update_source,parent');
      r.setStringParameterNoEscape('encoded_query', encodedQuery);
      r.setStringParameterNoEscape('record_limit', this.devRecordsLimit);

      var response = r.execute();

      if (!response.haveError()) {
        result = response.getBody();
        this.logIfDebug("Remote:result: " + result);
      } else {
        this.throwKnownError(
          gs.getMessage("There was error while retrieving the local updatesets. The error has been logged. Please try again."),
          response.getErrorMessage()
        );
      }

    } catch (ex) {
      var message = ex.message || ex;
      gs.error("VF: Error in getting local updatestes: " + message);
      throw new Error(ex);
    }

    return result;
  },

  logError : function(error){
    if(error){
      gs.error("VF: " + error);
    }
  },

  throwKnownError : function(message, errorDetails){
    
    if(errorDetails){
      this.logError(message + "\n\n" + errorDetails);
    }

    throw new Error(message); 
  },

  /**
   * Validate if JSON string is valid else throw error
   * @param {json string} jsonString 
   * @returns 
   */
  isValidJSON : function (jsonString) {
    try {
      JSON.parse(jsonString);
      return true;
    } catch (error) {
      this.throwKnownError(
        gs.getMessage("There was error while retrieving the data from the server. The error has been logged, please try again")
      , "Unable to parse the JSON response: " + error.message || error)
    }
  },

  logIfDebug : function(message){
    gs.info("VF: " + message);
  },

  type: 'UpdatesetHelper'
};


]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-28 01:31:40</sys_created_on>
        <sys_id>0a064d0a474b65101955b1a8536d433b</sys_id>
        <sys_mod_count>61</sys_mod_count>
        <sys_name>UpdatesetHelper</sys_name>
        <sys_package display_value="Updateset Management" source="x_293046_updateset">b0a3e5714747e1101955b1a8536d43eb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Updateset Management">b0a3e5714747e1101955b1a8536d43eb</sys_scope>
        <sys_update_name>sys_script_include_0a064d0a474b65101955b1a8536d433b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-06-03 12:56:13</sys_updated_on>
    </sys_script_include>
</record_update>
